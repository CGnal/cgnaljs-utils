import * as _ from "lamb";

import { countToMapBy } from "..";

describe("countToMapBy", () => {
    const objectToMap = _.compose(pairs => new Map(pairs), _.ownPairs);
    const persons = [
        { name: "Jane", surname: "Doe", age: 12, city: "New York" },
        { name: "John", surname: "Doe", age: 40, city: "New York" },
        { name: "Mario", surname: "Rossi", age: 18, city: "Rome" },
        { name: "Paolo", surname: "Bianchi", age: 15 }
    ];

    const personsCityCount = objectToMap({
        "New York": 2,
        "Rome": 1,
        "undefined": 1
    });

    it("should build a Map holding the count of the occurences of the key generated by the provided iteratee", () => {
        const countByCity = countToMapBy(_.compose(String, _.getKey("city")));

        expect(countByCity(persons)).toStrictEqual(personsCityCount);
    });

    it("should work with array-like objects", () => {
        const expected = objectToMap({
            "h": 1, "e": 1, "l": 3, "o": 2, " ": 1, "w": 1, "r": 1, "d": 1
        });

        expect(countToMapBy(_.identity)("hello world")).toStrictEqual(expected);
    });

    it("should throw an exception if the iteratee isn't a function", () => {
        expect(() => countToMapBy({})(persons)).toThrow();
    });

    it("should consider deleted or unassigned indexes in sparse arrays as `undefined` values", () => {
        const arr = [1, , 3, void 0, 5]; // eslint-disable-line no-sparse-arrays
        const expected = objectToMap({ false: 3, true: 2 });

        expect(countToMapBy(v => String(v === void 0))(arr)).toStrictEqual(expected);
    });

    it("should throw an exception if called without the data argument", () => {
        expect(countToMapBy(_.identity)).toThrow();
    });

    it("should throw an exception if supplied with `null` or `undefined`", () => {
        expect(() => { countToMapBy(_.identity)(null); }).toThrow();
        expect(() => { countToMapBy(_.identity)(void 0); }).toThrow();
    });

    it("should treat other values as an empty array and return an empty Map", () => {
        const expected = new Map();

        expect(countToMapBy(_.identity)(1)).toStrictEqual(expected);
        expect(countToMapBy(_.identity)({ a: 1, b: 2 })).toStrictEqual(expected);
    });
});
